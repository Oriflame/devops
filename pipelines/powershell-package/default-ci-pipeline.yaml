# About this template
# [default] pipeline for NuGet package Powershell project, use for [master] branch
# Suitable for simplified gitflow =>
# Branch under /feature folder: no package is created by default by CI, if needed, specify pack variable => ALPHA version will be created
# develop branch => -prerelease-XX package is created and pushed to GlobalDev
# master branch => stable version x.x.0 is pushed to GlobalDev

parameters:
  excludeRules: [] # List of rules. See https://github.com/PowerShell/PSScriptAnalyzer/tree/master/RuleDocumentation
  nugetversion: '5.4.0'
  pathToProjects: '$(Build.SourcesDirectory)/src/'
  nugetDevOpsFeedToPublish: '/8187f5c9-e9c1-419f-8a5c-98285cf7633c' #GlobalDev
  pushpackage: ''  # set to true or false to override variable "pushpackage". If not set, varibale "pushpackage" is used in template step PUSH = it is not executed
  noUnitTests: 'false'
  vmImage: 'windows-2019'
  jobName: 'Build'

jobs:
- job: '${{ parameters.jobName }}'
  
  pool:
    vmImage: '${{ parameters.vmImage }}'

  variables:
    ${{ if ne(parameters.pushpackage, '') }}:
      pushpackage: ${{ parameters.pushpackage }}

  steps:
  - template: templates/prerequisities.yaml
    parameters:
      nugetversion: '${{ parameters.nugetversion }}'

  - template: ../shared-templates/gitversion.yaml

  - template: templates/register.yaml
    parameters:
      pathToProjects: '${{ parameters.pathToProjects }}'

  - template: templates/ps-analyze.yaml
    parameters:
      pathToProjects: '${{ parameters.pathToProjects }}'
      excludeRules: '${{ parameters.excludeRules }}'
      noUnitTests: '${{ parameters.noUnitTests }}'

  - template: templates/test.yaml
    parameters:
      pathToProjects: '${{ parameters.pathToProjects }}'
      noUnitTests: '${{ parameters.noUnitTests }}'

  - template: templates/pack.yaml
    parameters:
      pathToProjects: '${{ parameters.pathToProjects }}'

  - template: ../shared-templates/push.yaml
    parameters:
      nugetDevOpsFeedToPublish: '${{ parameters.nugetDevOpsFeedToPublish }}'
      pushpackage: '${{ parameters.pushpackage }}'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'